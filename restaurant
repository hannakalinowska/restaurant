#! /usr/bin/env ruby

require 'bundler/setup'
Bundler.require(:default)

Dir['./lib/*'].each do |file|
  require File.expand_path(file, __dir__)
end

Thread.abort_on_exception = true

Rainbow.enabled = true

bus = PubSub.new

printer = OrderPrinter.new

cashier = ThreadedHandler.wrap(Cashier.new(bus))

assistant_managers = 2.times.map do
  ThreadedHandler.wrap(AssistantManager.new(bus))
end

cooks = 3.times.map do
  ThreadedHandler.wrap(Cook.new(bus))
end

waiter = Waiter.new(bus)

alarm_clock = AlarmClock.new(bus)

bus.subscribe('cook_food', ChaosMonkey.new(FairyDispatcher.new(cooks)))
bus.subscribe('price_order', FairyDispatcher.new(assistant_managers))
bus.subscribe('take_payment', cashier)
bus.subscribe('order_paid', printer)
bus.subscribe('schedule_message', alarm_clock)

process_manager_factory = ProcessManagerFactory.new(bus)

alarm_clock.start
ThreadedHandler.start_all

print_monitor = Proc.new do
  total = 0
  STDERR.puts "\e[H\e[2J"
  STDERR.puts Rainbow('QUEUE SIZES').bright.blue
  STDERR.puts Rainbow('‚îÅ' * 80).bright.blue
  ThreadedHandler.registry.each do |handler|
    queue_size = handler.queue_size
    total += queue_size
    STDERR.puts Rainbow("%-20s %-10s %5d #{'ü¶ã' * queue_size}" % [
      handler.type,
      handler.name,
      queue_size
    ]).bright.blue
  end
  STDERR.puts Rainbow('‚îÅ' * 80).bright.blue
  STDERR.puts Rainbow("%-31s %5d #{'ü¶ã' * total}" % ['Total', total]).bright.blue
  STDERR.puts Rainbow('‚îÅ' * 80).bright.blue
  if process_manager_factory.any?
    STDERR.puts Rainbow('PROCESS MANAGERS').bright.pink
    STDERR.puts Rainbow('‚îÅ' * 80).bright.pink
    process_manager_factory.count_by_type.each do |type, count|
      STDERR.puts Rainbow("%-31s %5d #{'üå∏' * count}" % [
        type,
        count
      ]).bright.pink
    end
    STDERR.puts Rainbow('‚îÅ' * 80).bright.pink
  end
end

unless STDERR.tty?
  Thread.new do
    loop do
      print_monitor.call
      sleep 0.2
    end
  end
end

waiting_for_closing = false

Signal.trap('SIGINT') do
  if waiting_for_closing
    bus.close
    exit
  end
  waiting_for_closing = true
end

loop do
  line_items = (rand(3) + 1).times.map do
    { name: Faker::Food.dish, quantity: rand(10) + 1 }
  end
  waiter.place_order(line_items)
  break if waiting_for_closing
  sleep 0.2
end

while process_manager_factory.any?
  sleep 0.2
end

print_monitor.call

bus.close
