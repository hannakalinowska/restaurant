#! /usr/bin/env ruby

require 'bundler/setup'

require 'active_support/inflector'
require 'rainbow'
require 'faker'
Dir['./lib/*'].each do |file|
  require File.expand_path(file, __dir__)
end

Thread.abort_on_exception = true

Rainbow.enabled = true

bus = PubSub.new

printer = OrderPrinter.new

cashier = ThreadedHandler.wrap(Cashier.new(bus))

assistant_managers = 2.times.map do
  ThreadedHandler.wrap(AssistantManager.new(bus))
end

assistant_manager_dispatcher = FairyDispatcher.new(assistant_managers)

cooks = 3.times.map do
  ThreadedHandler.wrap(Cook.new(bus))
end

cook_dispatcher = FairyDispatcher.new(cooks)

waiter = Waiter.new(bus)

bus.subscribe('order_placed', cook_dispatcher)
bus.subscribe('order_cooked', assistant_manager_dispatcher)
bus.subscribe('order_priced', cashier)
bus.subscribe('order_paid', printer)

ThreadedHandler.start_all

unless STDERR.tty?
  Thread.new do
    loop do
      total = 0
      STDERR.puts "\e[H\e[2J"
      STDERR.puts Rainbow('QUEUE SIZES').bright.blue
      STDERR.puts Rainbow('━' * 80).bright.blue
      ThreadedHandler.registry.each do |handler|
        queue_size = handler.queue_size
        total += queue_size
        STDERR.puts Rainbow("%-20s %-10s %5d #{'❚' * queue_size}" % [
          handler.type,
          handler.name,
          queue_size
        ]).bright.blue
      end
      STDERR.puts Rainbow('━' * 80).bright.blue
      STDERR.puts Rainbow("%-31s %5d #{'❚' * total}" % ['Total', total]).bright.blue
      sleep 0.2
    end
  end
end

Signal.trap('SIGINT') do
  loop do
    break if printer.order_count == waiter.order_count
    sleep 0.1
  end
  exit
end

loop do
  line_items = (rand(3) + 1).times.map do
    { name: Faker::Food.dish, quantity: rand(10) + 1 }
  end
  waiter.place_order(line_items)
  sleep 0.2
end
