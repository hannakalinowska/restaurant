#! /usr/bin/env ruby

require 'bundler/setup'
require 'rainbow'
require 'faker'
Dir['./lib/*'].each do |file|
  require File.expand_path(file, __dir__)
end

Thread.abort_on_exception = true

Rainbow.enabled = true

cashier = Cashier.new(OrderPrinter.new)

assistant_managers = 2.times.map do
  assistant_manager = AssistantManager.new(cashier)
  ThreadedHandler.new(assistant_manager, assistant_manager.name)
end

assistant_manager_dispatcher = FairyDispatcher.new(assistant_managers)

cooks = 7.times.map do
  cook = Cook.new(assistant_manager_dispatcher)
  ThreadedHandler.new(cook, cook.name)
end

dispatcher = FairyDispatcher.new(cooks)
waiter = Waiter.new(dispatcher, "Waiter #{Faker::Name.first_name}")

assistant_managers.each(&:start)
cooks.each(&:start)
waiter.start

unless STDERR.tty?
  Thread.new do
    loop do
      total = 0
      STDERR.puts "\e[H\e[2J"
      STDERR.puts Rainbow('QUEUE SIZES').bright.blue
      STDERR.puts Rainbow('━' * 80).bright.blue
      ([waiter] + cooks + assistant_managers + [cashier]).each do |handler|
        queue_size = handler.queue_size
        total += queue_size
        STDERR.puts Rainbow("%-20s %5d #{'❚' * queue_size}" % [handler.name, queue_size]).bright.blue
      end
      STDERR.puts Rainbow('━' * 80).bright.blue
      STDERR.puts Rainbow("%-20s %5d #{'❚' * total}" % ['Total', total]).bright.blue
      sleep 0.2
    end
  end
end

thread = Thread.new do
  paid_orders = 0

  while paid_orders != 100
    paid_orders += cashier.pay_outstanding_orders
    # puts "#{paid_orders} paid orders"
    sleep 0.5
  end
end

100.times do
  line_items = (rand(3) + 1).times.map do
    { name: Faker::Food.dish, quantity: rand(10) + 1 }
  end
  waiter.place_order(line_items)
end

thread.join
